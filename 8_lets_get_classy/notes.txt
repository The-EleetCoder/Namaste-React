Class based components is a normal javascript class.

we define a class based component as :-
class myComponent extends React.Component {
    constructor(props){
        super(props);
    }

    render(){
        return <jsx>
    }
}

we have a render method which returns the jsx.
To access the props, we call constructor(props). We also need to call super(props). In React, the super(props) method is used to call the constructor of the parent class. This is important because it allows the child class to access the properties and methods of the parent class.
To use the props, we do this.props.propname
whenever a new instance of a class is created, the constructor is called.
State Variables are created inside the constructor, inside the this.state{} object. 
this.state is a large object that holds all the state variables.
Never update state variables directly. Use this.setState({
    count: this.state.count + 1
})

Lifecycle :-
There are Three phases in the lifecycle. Mounting phase, Updating phase and Un-mounting phase.
In Mounting Phase, first the constructor is called, then the render method is called, then componentDidMount is called.
When we call this.setState(), then the Updating phase begins. The render method is called, this time with the updated values from the api, and once this render is complete, then the componentDidUpdate() is called.

Api calls are made inside componentDidMount(), similar to useEffect in functional components. This is because, we want to quickly render our website once (so that the user sees something ex. Shimmer ui) before making an api call as fetching data is a time consuming process. Then when our wesite is rendered once, then we make the api call and after getting data successfully, we again render the website with the data.
In react class components, there are two phases - Render phase and commit phase. First the render phase happens and then the commit phase begins. In the render phase the constructor is called, then the render method is called. This completes the render phase. Also, if a parent component has two children class components, then the render phase for both the children happens together, one after another, then the commit phase for both the children happens together.

---- MOUNTING ---- 
Constructor (dummy data)
Render (dummy data)
    <HTML Dummy>
componentDidMOunt()
    <API Call>
    <this.setState> -> State variable is updated

---- UPDATING ----
    render(APi data)
    <HTML (new API data>)
componentDidUpdate()